# -*- coding: utf-8 -*-
"""Ml_project(movie recommendation engine using collaborative filtering by matrix factorizations algorithm).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VKCXmKpK14KRDFm2yP1ZAf_0RtGqoIRE
"""

import numpy as np

class MatrixFactorization:
    def __init__(self, num_users, num_movies, latent_features, learning_rate, reg_param, num_iterations):
        self.num_users = num_users
        self.num_movies = num_movies
        self.latent_features = latent_features
        self.learning_rate = learning_rate
        self.reg_param = reg_param
        self.num_iterations = num_iterations
    
    def fit(self, ratings):
        # Initialize user and movie matrices with random values
        self.user_matrix = np.random.rand(self.num_users, self.latent_features)
        self.movie_matrix = np.random.rand(self.num_movies, self.latent_features)
        
        # Perform matrix factorization
        for iteration in range(self.num_iterations):
            for user, movie, rating in ratings:
                user_idx = user - 1
                movie_idx = movie - 1
                
                # Compute the predicted rating
                predicted_rating = np.dot(self.user_matrix[user_idx], self.movie_matrix[movie_idx])
                
                # Compute the error
                error = rating - predicted_rating
                
                # Update user and movie matrices
                self.user_matrix[user_idx] += self.learning_rate * (error * self.movie_matrix[movie_idx] - self.reg_param * self.user_matrix[user_idx])
                self.movie_matrix[movie_idx] += self.learning_rate * (error * self.user_matrix[user_idx] - self.reg_param * self.movie_matrix[movie_idx])
    
    def predict(self, user):
        user_idx = user - 1
        return np.dot(self.user_matrix[user_idx], self.movie_matrix.T)

# Example usage 
# Create an instance of the MatrixFactorization class
num_users = 5
num_movies = 4
latent_features = 2
learning_rate = 0.01
reg_param = 0.01
num_iterations = 100

mf = MatrixFactorization(num_users, num_movies, latent_features, learning_rate, reg_param, num_iterations)

# Define the ratings matrix
ratings = [
    (1, 1, 5),
    (1, 2, 4),
    (2, 1, 2),
    (2, 3, 1),
    (3, 2, 3),
    (4, 1, 1),
    (4, 3, 5),
    (5, 2, 2),
    (5, 4, 4)
]

# Fit the model to the ratings
mf.fit(ratings)

# Predict ratings for a user
user = 1
predictions = mf.predict(user)
print("Predicted ratings for user", user)
for movie, rating in enumerate(predictions, start=1):
    print("Movie", movie, ": Predicted rating =", rating)